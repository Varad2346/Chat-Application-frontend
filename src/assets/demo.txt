{
  "_id": "messageId",
  "groupId": "groupId", // Reference to the group
  "senderId": "userId",
  "message": "Hello, everyone!",
  "timestamp": "2025-03-31T12:34:56.000Z"
}


const io = require('socket.io')(server); // Assuming you have an Express server
const mongoose = require('mongoose');
const Message = require('./models/Message'); // Import your Message model

// Connect to MongoDB (or other DB)
mongoose.connect('mongodb://localhost/chatapp', { useNewUrlParser: true, useUnifiedTopology: true });

io.on('connection', (socket) => {
  console.log('a user connected');
  
  // When a user joins a group
  socket.on('joinGroup', async (groupId) => {
    // Fetch the chat history for the group from the database
    const messages = await Message.find({ groupId }).sort({ timestamp: 1 }); // Sort by timestamp

    // Send the messages to the user when they join
    socket.emit('loadMessages', messages);
  });

  // When a user sends a message
  socket.on('sendMessage', async (data) => {
    const { groupId, senderId, message } = data;
    const timestamp = new Date();

    // Save the message to the database
    const newMessage = new Message({
      groupId,
      senderId,
      message,
      timestamp
    });
    await newMessage.save();

    // Broadcast the message to other users in the group
    io.to(groupId).emit('newMessage', {
      senderId,
      message,
      timestamp
    });
  });

  // When a user joins a specific group
  socket.on('join', (groupId) => {
    socket.join(groupId);
    console.log(`User joined group: ${groupId}`);
  });

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Group Chat</title>
</head>
<body>
  <div id="chat-box"></div>
  <input type="text" id="message" placeholder="Type a message">
  <button onclick="sendMessage()">Send</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const groupId = 'your-group-id'; // Use the group ID you're working with
    const userId = 'your-user-id'; // Use the user ID

    // Join the group when the user opens the chat
    socket.emit('joinGroup', groupId);

    // Handle loading previous messages
    socket.on('loadMessages', (messages) => {
      messages.forEach((msg) => {
        const messageElement = document.createElement('p');
        messageElement.textContent = `${msg.senderId}: ${msg.message}`;
        document.getElementById('chat-box').appendChild(messageElement);
      });
    });

    // Handle receiving a new message
    socket.on('newMessage', (data) => {
      const messageElement = document.createElement('p');
      messageElement.textContent = `${data.senderId}: ${data.message}`;
      document.getElementById('chat-box').appendChild(messageElement);
    });

    // Send a message
    function sendMessage() {
      const message = document.getElementById('message').value;
      const data = { groupId, senderId: userId, message };
      socket.emit('sendMessage', data);
    }
  </script>
</body>
</html>
